"""Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.
Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool.
 Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
 Измерьте время выполнения и выведите его в консоль.
Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности,
предварительно закомментировав другой."""
import time
from multiprocessing import Pool

# Функция для чтения информации из файла
def read_info(name):
    all_data = []  # Локальный список для хранения данных
    with open(name, 'r') as file:  # Открываем файл для чтения
        while True:
            line = file.readline()  # Считываем строку
            if not line:  # Если строка пустая, выходим из цикла
                break
            all_data.append(line.strip())  # Добавляем строку в список, убирая пробелы

if __name__ == '__main__':
    # Список названий файлов
    filenames = [f'./file {number}.txt' for number in range(1, 5)]  # Предполагаем, что файлы названы file 1.txt, file 2.txt и т.д.

    # Линейный вызов
    start_time = time.time()  # Запоминаем время начала
    for filename in filenames:
        read_info(filename)  # Читаем файл по очереди
    linear_time = time.time() - start_time  # Вычисляем время выполнения
    print(f'Линейное выполнение: {linear_time}')  # Выводим время выполнения

    # Многопроцессный вызов
    start_time = time.time()  # Запоминаем время начала
    with Pool() as pool:  # Создаем пул процессов
        pool.map(read_info, filenames)  # Используем метод map для многопроцессного выполнения
    multiprocessing_time = time.time() - start_time  # Вычисляем время выполнения
    print(f'Многопроцессное выполнение: {multiprocessing_time}')  # Выводим время выполнения

